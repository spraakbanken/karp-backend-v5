name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request: {}

env:
  POETRY_VERSION: "1.3.1"
  MINIMUM_PYTHON_VERSION: "3.8"

jobs:
  lint:
    name: ${{ matrix.task.name }} (${{ matrix.os }})
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        # Only run checks for ubuntu
        os: [ubuntu]
        task:
          # - name: Type check
          #   run: make type-check
          - name: Lint code
            run: make lint-no-fail

    runs-on: ${{ matrix.os }}-latest

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/setup.*') }}-${{ hashFiles('.github/workflows/ci.yml')}}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          make install-dev
          make install-typecheck
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: make install-dev
      #----------------------------------------------
      # Run matrix task
      #----------------------------------------------
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

  coverage:
    name: Test coverage py-${{ matrix.python-version }} on ${{ matrix.os }}

    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        # ignore windows for now
        os: [ubuntu]
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        es-version: ["6.8.23"]
    continue-on-error: >-
      ${{ contains(matrix.python-version, 'dev') && true || false }}

    runs-on: ${{ matrix.os }}-latest
    services:
      mysql:
        image: mariadb:10.3
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: testing
          MYSQL_DATABASE: karp
          MYSQL_PASSWORD: testing
          MYSQL_USER: karp
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/setup.*') }}-${{ hashFiles('.github/workflows/ci.yml')}}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          make install-dev
          make install-typecheck

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: make install-dev

      - name: Download elasticsearch
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es-version }}.tar.gz
          tar -xzf elasticsearch-${{ matrix.es-version }}.tar.gz
      - name: Create .env file
        run: |
          echo "ELASTICSEARCH_ENABLED=True" >> .env
          echo "ES_HOME=`realpath elasticsearch-${{ matrix.es-version }}`" >> .env
          cat .env
      #----------------------------------------------
      # Run tests and upload coverage
      #----------------------------------------------
      - name: Run tests for coverage
        run: make cov_report=xml test-w-coverage
        env:
          KARP5_DBPASS: karp:testing@127.0.0.1:${{ job.services.mysql.ports['3306'] }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # directory: ./coverage/reports/
          # env_vars: OS,PYTHON
          fail_ci_if_error: false
          # files: ./coverage1.xml,./coverage2.xml
          # flags: unittests
          # name: codecov-umbrella
          verbose: true


   # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [lint, coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-failures: lint

  build:
    name: Build package
     # only run on push to main and on release
    if: "success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master')"
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      #----------------------------------------------
      #  -----  install & configure build  -----
      #----------------------------------------------
      # - name: Install pypa/build
      #   run: python3 -m pip install build --user

      #----------------------------------------------
      #  -----  build distribution -----
      #----------------------------------------------
      - name: Build a binary wheel and a source tarball
        # run: python3 -m build --sdist --wheel --outdir dist/ .
        run: |
          pip install --upgrade setuptools twine wheel pbr
          python setup.py sdist bdist_wheel
          echo "github.ref = ${{ github.ref }}"
      - name: Check distributions
        run: twine check dist/*
      #----------------------------------------------
      #  -----  upload artifacts  -----
      #----------------------------------------------
      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  test-build:
    name: test build on ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu] #, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: rm -r karp5
      # - run: pip install typing-extensions
      # - run: pip install -r tests/requirements.txt
      - run: pip install karp-backend-5 --no-index --no-deps --find-links dist --force-reinstall
      # - run: pytest

  publish:
    needs: [check, test-build]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}
      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

